# SPDX-FileCopyrightText: 2025 Howetuft
#
#
# SPDX-License-Identifier: Apache-2.0

# This workflow builds the dependency sets. It is not intended to run standalone,
# but to be called by another higher level workflow (checker, releaser...)

name: LuxCore Dependency Builder

on:
  workflow_call:
    inputs:
      luxdeps-version:  # To be set by caller (checker, releaser...)
        required: true
        type: string
      rebuild-all:
        description: "Rebuild all"
        required: False
        type: boolean
        default: False

jobs:
  build-deps:
    name: Build dependencies ${{ matrix.os }}
    permissions: read-all
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: False
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
    env:
      BUILD_TYPE: Release
      # SANITIZE: true # uncomment to sanitize
      CXX_VERSION: 20
      GCC_VERSION: 14
      GLIBC_VERSION: 2_28
      GH_TOKEN: ${{ github.token }}
      BOOST_INSTALL_LAYOUT: system
      CONAN_LOG_LEVEL: ${{ vars.conan_log_level }}  # To be set by caller (act)
      LUXDEPS_VERSION: ${{ inputs.luxdeps-version }}
      REBUILD_ALL: ${{ inputs.rebuild-all }}
      CACHE: ${{ inputs.rebuild-all && 'trashbin' || 'conan-cache' }}  # Cache for deps

    steps:

      #***********************************#
      #        Common init steps          #
      #***********************************#

      - name: Check LUXDEPS_VERSION
        uses: nick-fields/assert-action@v2
        with:
          expected: ''
          actual: ${{ env.LUXDEPS_VERSION }}
          comparison: notEqual

      - name: Checkout main repository (LuxCoreDeps)
        uses: actions/checkout@v4

      - name: Find workspace
        shell: bash
        run: |
          case ${{ runner.os }} in
            Linux) _workspace="/project";;
            Windows) _workspace=$(cygpath -u $GITHUB_WORKSPACE);;
            macOS) _workspace="$GITHUB_WORKSPACE";;
            *) echo "Unhandled os ${{ runner.os }}";exit 64;;
          esac
          echo "WORKSPACE=${_workspace}" >> "$GITHUB_ENV"

      - name: Set Conan preset
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable(
              'CONAN_PRESET',
              String.raw`conan-${{ env.BUILD_TYPE }}`.toLowerCase()
            )

      #***********************************#
      #             ccache                #
      #***********************************#

      - name: Update apt (for ccache)
        if: runner.os == 'Linux'
        shell: bash
        run: sudo apt-get update -y

      - name: Configure ccache
        uses: actions/github-script@v7
        with:
          script: |
            const workspace = String.raw`${{ github.workspace }}`;

            const envVariables = {
                'cache-variant': String.raw`ccache`,
                'CMAKE_CXX_COMPILER_LAUNCHER': String.raw`ccache`,
                'CMAKE_C_COMPILER_LAUNCHER': String.raw`ccache`,
                'CCACHE_CONFIGPATH': String.raw`${workspace}/ccache.conf`,
                'CCACHE_DIR': String.raw`${workspace}/.ccache`,
                'CCACHE_DEBUGDIR': String.raw`${workspace}/ccache-debug`,
                'CCACHE_LOGFILE': String.raw`${workspace}/ccache.log`
            };

            for (const [key, value] of Object.entries(envVariables)) {
                core.exportVariable(key, value);
            }

      - name: Install ccache and retrieve cached files (All)
        # Use full length commit SHA, otherwise CodeQL complains...
        uses: hendrikmuhs/ccache-action@a1209f81afb8c005c13b4296c32e363431bffea5  # 1.2.17
        with:
          create-symlink: false
          variant: ${{ env.cache-variant }}
          key: ${{ matrix.os }}-${{ github.run_id }}  # Action will prepend 'ccache-'
          restore-keys: ${{ matrix.os }}-
          max-size: 5G
          verbose: 1

      #***********************************#
      #       Cached dependencies         #
      #***********************************#

      - name: Prepare cache dependency folder (all)
        shell: bash
        run: |
            if [[ "$RUNNER_OS" == "Windows" ]]; then
              CONANCACHE=${{ env.WORKSPACE }}/conan-cache
            else
              CONANCACHE=${{ github.workspace}}/conan-cache
            fi
            mkdir -p $CONANCACHE
            echo "CONANCACHE=${CONANCACHE}" >> $GITHUB_ENV

      - name: Retrieve cached dependencies (All)
        id: retrieve-cache-deps
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.CACHE }}
          key: deps-${{ matrix.os }}-${{ github.run_id }}
          restore-keys: deps-${{ matrix.os }}-

      #***********************************#
      #           Build tools             #
      #***********************************#

      - name: Install ISPC (Windows/MacOS)
        # Use full length commit SHA, otherwise CodeQL complains...
        if: runner.os == 'macOS' || runner.os == 'Windows'
        uses: ispc/install-ispc-action@e3887e6f22350b0f2263e3dbe6f1fc3eff331050  # HEAD in main
        with:
          version: 1.25.3

      - name: Prepare msvc (Windows)
        if: runner.os == 'Windows'
        # Use full length commit SHA, otherwise CodeQL complains...
        uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756  # 1.13.0

      - name: Configure git for long paths (Windows)
        shell: bash
        if: runner.os == 'Windows'
        run: git config --system core.longpaths true

      - name: Set MacOS deployment target (MacOS)
        if: runner.os == 'macOS'
        uses: actions/github-script@v7
        with:
          script: |
            if ('${{ runner.arch }}' == 'X64') {
              target = '10.15';
              arch='x86_64';
            }
            else {
              target = '12.0';
              arch='armv8';
            }
            core.exportVariable('MACOSX_DEPLOYMENT_TARGET', target);
            core.exportVariable('CMAKE_OSX_DEPLOYMENT_TARGET', target);
            core.exportVariable('PKG_ARCH', arch);

      #***********************************#
      # Build steps (one per platform...) #
      #***********************************#

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        env:
          CONAN_HOME: ${{ github.workspace }}\.conan2
        run: |
          bash ${{ env.WORKSPACE }}/run-conan.sh

      - name: Build (MacOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
            brew install ispc
            bash ${{ env.WORKSPACE }}/run-conan.sh

      - name: Build (Linux)
        if: runner.os == 'Linux'
        shell: bash
        # Build for Linux is containerized in manylinux_2_28_x86_64
        env:
          MANYLINUX_IMAGE: manylinux_2_28_x86_64
          CONTAINER_NAME: manylinux  # Name of the container to create (arbitrary)
          LINUX_CONANCACHE: /conan-cache
          LINUX_CCACHE_DIR: /project/.ccache
          # CONTAINER_COMMAND contains the code to be executed in container:
          CONTAINER_COMMAND: |
            # Set environment variables (use jinja)
            export BUILD_TYPE=${{ env.BUILD_TYPE }}
            export GCC_VERSION=${{ env.GCC_VERSION }}
            export ASAN_PATH=${{ env.ASAN_PATH }}
            export WORKSPACE=${{ env.WORKSPACE }}
            export CXX_VERSION=${{ env.CXX_VERSION }}
            export RUNNER_OS=${{ runner.os }}
            export RUNNER_ARCH=${{ runner.arch }}
            export CONAN_LOG_LEVEL=${{ env.CONAN_LOG_LEVEL }}
            export LUXDEPS_VERSION=${{ env.LUXDEPS_VERSION }}
            export CMAKE_POLICY_VERSION_MINIMUM=3.5

            # Set Python
            manylinux-interpreters ensure cp313-cp313
            PATH=/opt/python/cp313-cp313/bin:$PATH
            which python

            # Install conan
            python -m pip install conan

            # Set toolset
            _T=/opt/rh/gcc-toolset-${{ env.GCC_VERSION }}/root
            export CC=${_T}/usr/bin/gcc
            export CXX=${_T}/usr/bin/g++
            export CMAKE_C_COMPILER_LAUNCHER=ccache
            export CMAKE_CXX_COMPILER_LAUNCHER=ccache
            export VERBOSE=1

            # Install conda (for gh)
            dnf install -y wget
            mkdir -p miniconda3
            wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \
              -O miniconda3/miniconda.sh
            bash miniconda3/miniconda.sh -b -u -p miniconda3
            rm miniconda3/miniconda.sh
            source miniconda3/bin/activate
            conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/main
            conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/r
            conda tos accept --override-channels --channel https://conda.anaconda.org/conda-forge

            conda init --all

            # Install gh
            conda install conda-forge::gh --channel conda-forge -y
            echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token

            # Install ccache
            conda install conda-forge::ccache -y
            export CCACHE_CONFIGPATH=/project/ccache.conf
            ccache -o cache_dir=/project/.ccache
            ccache -o depend_mode=false
            echo "ccache configuration:"
            ccache -p

            # Install ccache and IPC-Cmd
            dnf install -y epel-release
            dnf install -y almalinux-release-devel
            dnf install -y ccache
            dnf install -y perl-IPC-Cmd perl-Digest-SHA perl-Time-Piece

            if [[ ${{ env.GLIBC_VERSION }} != 2_28 ]]; then
              dnf install -y perl-FindBin perl-lib
            fi

            ccache --show-config

            # Install git-lfs
            curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.rpm.sh | sudo bash
            dnf install -y git-lfs

            # Install libasan (optional)
            if [[ -z ${SANITIZE+x} ]]; then
              echo "No sanitizing";
            else
              dnf install -y gcc-toolset-14-libasan-devel;
            fi

            # Install ispc
            # https://www.intel.com/content/www/us/en/docs/oneapi/installation-guide-linux/2023-0/yum-dnf-zypper.html
            tee > /tmp/oneAPI.repo << EOF
            [oneAPI]
            name=Intel® oneAPI repository
            baseurl=https://yum.repos.intel.com/oneapi
            enabled=1
            gpgcheck=1
            repo_gpgcheck=1
            gpgkey=https://yum.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
            EOF
            mv /tmp/oneAPI.repo /etc/yum.repos.d

            dnf install -y intel-oneapi-ispc
            source /opt/intel/oneapi/ispc/latest/env/vars.sh

            # Build
            source ${{ env.WORKSPACE }}/run-conan.sh

            # Re-inspect ccache
            echo "ccache results:"
            ccache -sv

        # run contains the code to be executed on host side
        run: |
          # Local variables
          CONTAINER_CONANCACHE=${{ env.CONTAINER_NAME }}:${{ env.LINUX_CONANCACHE }}
          CONTAINER_CCACHE_DIR=${{ env.CONTAINER_NAME }}:${{ env.LINUX_CCACHE_DIR }}

          # Clean (remove container if it exists)
          CONTAINER_LIST=$(docker container ps -a)
          if [[ ${CONTAINER_LIST} == *${CONTAINER_NAME}* ]]; then
            echo "Removing existing container '$CONTAINER_NAME'"
            docker rm --force $CONTAINER_NAME
          fi

          # Start
          echo ""
          echo "******** LAUCHING MANYLINUX CONTAINER ********"
          echo ""
          docker create \
            -t \
            --name $CONTAINER_NAME \
            quay.io/pypa/${{ env.MANYLINUX_IMAGE }}
          docker start $CONTAINER_NAME
          docker exec $CONTAINER_NAME env

          # Copy source tree
          docker exec $CONTAINER_NAME sh -c "echo Copying source tree"
          docker cp ${{ github.workspace }} $CONTAINER_NAME:/project

          # Copy cached deps
          echo "Copying deps: $CONANCACHE --> $CONTAINER_CONANCACHE"
          docker cp $CONANCACHE/. $CONTAINER_CONANCACHE

          # Copy ccache
          echo "Copying ccache: $CCACHE_DIR --> $CONTAINER_CCACHE_DIR"
          docker cp $CCACHE_DIR/. $CONTAINER_CCACHE_DIR

          # Execute command in container
          docker exec \
            --workdir=/project \
            $CONTAINER_NAME \
            sh -c '${{ env.CONTAINER_COMMAND }}'

          # Get artifact back
          echo "Getting artifact back to host: $CONTAINER_CONANCACHE/. --> $CONANCACHE"
          docker cp $CONTAINER_CONANCACHE/. $CONANCACHE

          # Copy ccache back
          echo "Copying ccache: $CONTAINER_CCACHE_DIR --> $CCACHE_DIR"
          docker cp $CONTAINER_CCACHE_DIR/. $CCACHE_DIR

          # Stop container
          echo "Stopping container"
          docker stop $CONTAINER_NAME

      #***********************************#
      #             Post-build            #
      #***********************************#

      - name: Check conan archive content
        if: ${{ !env.ACT }}
        shell: bash
        run: |
            # Install conan
            if [[ "$RUNNER_OS" == "Windows" ]]; then
              CONAN=conan.exe
              PIPX_HOME=${{ env.WORKSPACE }}/pipx
            else
              CONAN=conan
            fi

            pipx ensurepath --force
            pipx install --quiet conan

            # Clean cache and load archive
            $CONAN remove -c "*" > /dev/null
            if [[ -f ${{ env.CONANCACHE }}/conan-cache-save.tgz ]]; then
              $CONAN cache restore ${{ env.CONANCACHE }}/conan-cache-save.tgz > /dev/null
              echo "**********************"
              echo "Conan archive content:"
              $CONAN list --format=compact
            else
              echo "No archive content retrieved from cache"
            fi

      - name: Save dependency cache
        if: always()
        id: cache-deps-save
        uses: actions/cache/save@v4
        with:
          path: conan-cache
          key: deps-${{ matrix.os }}-${{ github.run_id }}

      ## For debugging
      #- name: Setup tmate session (debug)
        #if: ${{ failure() }}
        #uses: mxschmitt/action-tmate@v3

      # Upload artifacts
      - uses: actions/upload-artifact@v4
        id: artifact-upload-step
        with:
          name: luxcore-deps-${{ matrix.os }}
          path: conan-cache
          compression-level: 0  # Already a zip...

      - name: Output artifact ID
        run: |
          echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'
          echo 'Artifact URL is ${{ steps.artifact-upload-step.outputs.artifact-url }}'
          echo 'Artifact SHA-256 is ${{ steps.artifact-upload-step.outputs.artifact-digest }}'
